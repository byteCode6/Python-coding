import openai
from gtts import gTTS
import os
import random
import time
import logging

# üîë OpenAI API Key (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API key ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®)
openai.api_key = "YOUR_OPENAI_API_KEY"

# üîê Chat Model Version
MODEL_NAME = "gpt-4"


# üéô Enhanced Google Text-to-Speech Function with Multi-language Support
def speak(text, lang='en'):
    """
    Converts text to speech and plays it.
    Parameters:
        - text (str): The text to convert to speech.
        - lang (str): Language code for the speech (default is English - 'en').
    """
    try:
        tts = gTTS(text=text, lang=lang)
        filename = f"voice_{random.randint(1000, 9999)}.mp3"
        tts.save(filename)
        os.system(f"start {filename}")
        time.sleep(2)  # Allow enough time for the audio file to play
        os.remove(filename)
    except Exception as e:
        logging.error(f"Error in speak function: {str(e)}")
        print(f"[Error] Could not play the audio: {str(e)}")


# üß† OpenAI API: Improved ask_gpt Function for Chat Completions (GPT-4)
def ask_gpt(question):
    """
    Sends a user question to OpenAI's GPT-4 API and returns the response.
    Parameters:
        - question (str): The user's input to be passed to the model.
    Returns:
        - str: The response generated by the AI model.
    """
    try:
        response = openai.ChatCompletion.create(
            model=MODEL_NAME,
            messages=[{"role": "system", "content": "You are a helpful assistant."},
                      {"role": "user", "content": question}],
            max_tokens=200,
            temperature=0.7
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.error(f"Error in ask_gpt function: {str(e)}")
        return f"Error: {str(e)}"


# üìù Enable Logging for Conversations
logging.basicConfig(
    filename="chatbot_log.txt",
    level=logging.INFO,
    format="%(asctime)s - %(message)s"
)


# ü§ñ Chatbot Interface with Multilingual Support
def chatbot():
    """
    Main chatbot loop that interacts with the user.
    This function continuously processes user input and responds until 'exit' is entered.
    """
    print("ü§ñ AI Voice Chatbot (Type 'exit' to quit)\n")
    speak("Hello! I am your AI chatbot. How can I help you?")
    logging.info("Chatbot session started.")

    while True:
        user_input = input("You: ").strip()
        if user_input.lower() == "exit":
            farewell = "Goodbye! Have a great day!"
            print(f"Bot: {farewell}")
            speak(farewell)
            logging.info("User exited the chatbot.")
            break

        # üß† Generate AI Response
        response = ask_gpt(user_input)
        print(f"Bot: {response}")

        # üéô Convert Response to Speech
        user_lang = input("Enter language code for response (default: 'en'): ").strip() or 'en'
        speak(response, lang=user_lang)

        # Log Conversation
        logging.info(f"User: {user_input}")
        logging.info(f"Bot: {response}")


# Run the Chatbot
if __name__ == "__main__":
    try:
        chatbot()
    except KeyboardInterrupt:
        print("\n[INFO] Chatbot closed.")
        logging.info("Chatbot session ended by user.")
